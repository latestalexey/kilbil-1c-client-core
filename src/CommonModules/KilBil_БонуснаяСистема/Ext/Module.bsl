////////////////////////////////////////////////////////////////////////////////

// 
////
Функция ПолучитьЗначениеКонстанты(Имя) Экспорт 
	
	Возврат Константы[Имя].Получить();
	
КонецФункции

// 
////
Функция УстановитьЗначениеКонстанты(Имя, Значение) Экспорт 
	
	Константы[Имя].Установить(Значение);
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////

// 
////
Функция ПолучитьПараметрыПодключения() 
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Сервер", СокрЛП(ПолучитьЗначениеКонстанты("KilBil_Сервер")));
	ПараметрыПодключения.Вставить("Токен",  СокрЛП(ПолучитьЗначениеКонстанты("KilBil_Токен"))); 
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// 
////
Функция ПолучитьПараметрыЗапроса(РесурсНаСервере, ТелоЗапроса) 
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("РесурсНаСервере", "/load/" + РесурсНаСервере);
	ПараметрыЗапроса.Вставить("ТелоЗапроса", 	 ТелоЗапроса);
		
	Возврат ПараметрыЗапроса;
	
КонецФункции

// 
////
Функция ВыполнитьHTTPЗапрос(ПараметрыПодключения, ПараметрыЗапроса, Отказ, ТипЗапроса = "JSON") 
	
	ОписаниеОшибки = "";
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер);
		
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.РесурсНаСервере + "?h=" + ПараметрыПодключения.Токен);
		HTTPЗапрос.Заголовки.Вставить("content-type", "application/json; charset=utf-8");
		
		Если ТипЗапроса = "XML" Тогда // ??
			Если ПараметрыЗапроса.РесурсНаСервере = "/load/getsumbonusoutx" Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(СериализоватьВXML_getsumbonusoutX(ПараметрыЗапроса.ТелоЗапроса));
			ИначеЕсли ПараметрыЗапроса.РесурсНаСервере = "/load/processsalex" Тогда 
				HTTPЗапрос.УстановитьТелоИзСтроки(СериализоватьВXML_processsaleX(ПараметрыЗапроса.ТелоЗапроса));
			КонецЕсли;
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(СериализоватьВJSON(ПараметрыЗапроса.ТелоЗапроса));
		КонецЕсли; 
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Отказ = Истина;
		
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	ПараметрыОтвета = Новый Структура;
		
	Если Отказ Тогда
		ОтветСервера = Неопределено;
	Иначе
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Попытка
				ОтветСервера = СериализоватьИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
			Исключение
			    ОтветСервера = Неопределено;
				
				Отказ = Истина;
				
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		Иначе
			ОтветСервера = Неопределено;
			
			Отказ = Истина;
			
			ОписаниеОшибки = "Ошибка сервера";
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрыОтвета.Вставить("Ошибка", 		   Отказ);
	ПараметрыОтвета.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	ПараметрыОтвета.Вставить("ОтветСервера",   ОтветСервера);
		
	Возврат ПараметрыОтвета;
	
КонецФункции

// 
////
Функция СериализоватьВJSON(Значение) 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( , Символы.Таб));
	
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// 
////
Функция СериализоватьИзJSON(Значение) 
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);
	
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////

// ?? 
////
Функция СериализоватьВXML_getsumbonusoutX(Значение) 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("doc"); // doc {
	ЗаписьXML.ЗаписатьНачалоЭлемента("head"); // head { 
	ЗаписьXML.ЗаписатьАтрибут("time", Значение.time);
	ЗаписьXML.ЗаписатьАтрибут("id",   Значение.id);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // } head	
	ЗаписьXML.ЗаписатьНачалоЭлемента("table"); // table {
		
	Для Каждого ЭлементМассива Из Значение.json Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("row"); // row {
		ЗаписьXML.ЗаписатьАтрибут("num",   		  	  ЭлементМассива.num);
		ЗаписьXML.ЗаписатьАтрибут("code",   		  ЭлементМассива.code);
		ЗаписьXML.ЗаписатьАтрибут("name",   		  ЭлементМассива.name);
		ЗаписьXML.ЗаписатьАтрибут("full_name",   	  ЭлементМассива.full_name);
		ЗаписьXML.ЗаписатьАтрибут("quantity",   	  ЭлементМассива.quantity);
		ЗаписьXML.ЗаписатьАтрибут("price",   	  	  ЭлементМассива.price);
		ЗаписьXML.ЗаписатьАтрибут("total",   	  	  ЭлементМассива.total);
		ЗаписьXML.ЗаписатьАтрибут("discounted_price", ЭлементМассива.discounted_price);
		ЗаписьXML.ЗаписатьАтрибут("discounted_total", ЭлементМассива.discounted_total);
		ЗаписьXML.ЗаписатьАтрибут("is_certificate",   ЭлементМассива.is_certificate);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // } row
	КонецЦикла; 
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); // } table
	ЗаписьXML.ЗаписатьКонецЭлемента(); // } doc
	
	Возврат ЗаписьXML.Закрыть();
		
КонецФункции

// ?? 
////
Функция СериализоватьВXML_processsaleX(Значение) 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("doc"); // doc {
	ЗаписьXML.ЗаписатьНачалоЭлемента("head"); // head { 
	ЗаписьXML.ЗаписатьАтрибут("time", 		  Значение.time);
	ЗаписьXML.ЗаписатьАтрибут("id",    		  Значение.id);
	ЗаписьXML.ЗаписатьАтрибут("bonusout", 	  Значение.bonusout);
	ЗаписьXML.ЗаписатьАтрибут("maxbonusout",  Значение.maxbonusout);
	ЗаписьXML.ЗаписатьАтрибут("type", 		  Значение.type);
	ЗаписьXML.ЗаписатьАтрибут("moveid", 	  Значение.moveid);
	ЗаписьXML.ЗаписатьАтрибут("returnmoveid", Значение.returnmoveid);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // } head
	ЗаписьXML.ЗаписатьНачалоЭлемента("table"); // table {
		
	Для Каждого ЭлементМассива Из Значение.json Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("row"); // row {
		ЗаписьXML.ЗаписатьАтрибут("num",   		  	  ЭлементМассива.num);
		ЗаписьXML.ЗаписатьАтрибут("move_num",   	  ЭлементМассива.move_num);
		ЗаписьXML.ЗаписатьАтрибут("code",   		  ЭлементМассива.code);
		ЗаписьXML.ЗаписатьАтрибут("name",   		  ЭлементМассива.name);
		ЗаписьXML.ЗаписатьАтрибут("full_name",   	  ЭлементМассива.full_name);
		ЗаписьXML.ЗаписатьАтрибут("quantity",   	  ЭлементМассива.quantity);
		ЗаписьXML.ЗаписатьАтрибут("price",   	  	  ЭлементМассива.price);
		ЗаписьXML.ЗаписатьАтрибут("total",   	  	  ЭлементМассива.total);
		ЗаписьXML.ЗаписатьАтрибут("discounted_price", ЭлементМассива.discounted_price);
		ЗаписьXML.ЗаписатьАтрибут("discounted_total", ЭлементМассива.discounted_total);
		ЗаписьXML.ЗаписатьАтрибут("is_certificate",   ЭлементМассива.is_certificate);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // } row
	КонецЦикла; 
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); // } table
	ЗаписьXML.ЗаписатьКонецЭлемента(); // } doc
	
	Возврат ЗаписьXML.Закрыть();	
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////

// 
////
Функция НайтиКлиента(Параметры, Отказ) Экспорт 
		
	Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
								ПолучитьПараметрыЗапроса("searchclient", Параметры), 
								Отказ); 
	
КонецФункции

// 
////
Функция ПолучитьБалансКлиента(Параметры, Отказ) Экспорт 
	
	Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
								ПолучитьПараметрыЗапроса("getclientbalance", Параметры), 
								Отказ);
	
КонецФункции

// 
////
Функция ПолучитьМаксимальнуюСуммуСписания(Параметры, Отказ) Экспорт 
		
	//Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
	//							ПолучитьПараметрыЗапроса("getsumbonusout", Параметры), 
	//							Отказ);	
								
	Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
								ПолучитьПараметрыЗапроса("getsumbonusoutx", Параметры), 
								Отказ, "XML"); // ??	
	
КонецФункции

// 
////
Функция ОтправитьДокумент(Параметры, Отказ) Экспорт 
	
	//Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
	//							ПолучитьПараметрыЗапроса("processsalex", Параметры), 
	//							Отказ);
								
	Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
								ПолучитьПараметрыЗапроса("processsalex", Параметры), 
								Отказ, "XML"); // ??	
	
КонецФункции

// 
////
Функция ЗакрытьДокумент(Параметры, Отказ) Экспорт 
	
	Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
								ПолучитьПараметрыЗапроса("confirmsale", Параметры), 
								Отказ);
	
КонецФункции

// 
////
Функция АктивироватьКлиента(Параметры, Отказ) Экспорт 
	
	Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
								ПолучитьПараметрыЗапроса("activateclient", Параметры), 
								Отказ);
	
КонецФункции

// 
////
Функция СоздатьКлиента(Параметры, Отказ) Экспорт 
	
	Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
								ПолучитьПараметрыЗапроса("createclient", Параметры), 
								Отказ);
	
КонецФункции

// 
////
Функция ВыгрузитьНоменклатуру(Параметры, Отказ) Экспорт 
	
	Возврат ВыполнитьHTTPЗапрос(ПолучитьПараметрыПодключения(), 
								ПолучитьПараметрыЗапроса("goods", Параметры), 
								Отказ);
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////

// 
////
Процедура ПроверитьОтветСервера(Параметры, ТипЗапроса, Отказ, ОписаниеОшибки) Экспорт 
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		Если 	  ТипЗапроса = "searchclient" Тогда
			
			
		ИначеЕсли ТипЗапроса = "getbalance" Тогда 
			
			
		ИначеЕсли ТипЗапроса = "getclientbalance" Тогда 
			
			
		//ИначеЕсли ТипЗапроса = "getsumbonusout" Тогда
		ИначеЕсли ТипЗапроса = "getsumbonusoutx" Тогда // ??
			
			
		//ИначеЕсли ТипЗапроса = "processsale" Тогда
		ИначеЕсли ТипЗапроса = "processsalex" Тогда // ??
		    
			Если Параметры.Свойство("result_code") Тогда
				Если Параметры.result_code = "6" ИЛИ 
					 Параметры.result_code = "4" Тогда
					ОписаниеОшибки = СокрЛП(Параметры.result_text);
					
					Отказ = Истина;	
				КонецЕсли; 
			Иначе
				ОписаниеОшибки = "Неизвестная ошибка";
				
				Отказ = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗапроса = "confirmsale" Тогда 
			
			Если Параметры.Свойство("result_code") Тогда
				Если СокрЛП(Параметры.result_code) <> "0" Тогда
					ОписаниеОшибки = СокрЛП(Параметры.result_text);

					Отказ = Истина;	
				КонецЕсли; 
			Иначе
				ОписаниеОшибки = "Неизвестная ошибка";
				
				Отказ = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗапроса = "activateclient" Тогда 
			
			
		ИначеЕсли ТипЗапроса = "createclient" Тогда 
			
			
		ИначеЕсли ТипЗапроса = "goods" Тогда
			
			Если Параметры.Свойство("success") Тогда
				Если СокрЛП(Параметры.success) <> "1" Тогда
					ОписаниеОшибки = "Неудалось выгрузить номенклатуру в бонусную систему";
					
					Отказ = Истина;	
				КонецЕсли; 
			Иначе
				ОписаниеОшибки = "Неизвестная ошибка";
				
				Отказ = Истина;
			КонецЕсли;
			
		Иначе
			
			// ??
			
		КонецЕсли; 
	Иначе
		ОписаниеОшибки = "Неизвестная ошибка";
		
		Отказ = Истина;	
	КонецЕсли;  
	
КонецПроцедуры

// 
////
Процедура ЗаписатьВЖурналРегистрации(Сообщение, Уровень = Неопределено) Экспорт 
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;	
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации("KilBil_БонуснаяСистема", Уровень, , , Сообщение);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////

// 
////
Процедура РекурсивныйОбходДереваЗначенийНоменклатуры(СтрокиДерева, РодительскийМассив) Экспорт 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ЭтоГруппа = NULL Тогда
			РекурсивныйОбходДереваЗначенийНоменклатуры(СтрокаДерева.Строки, РодительскийМассив);
			
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("id", 		  СокрЛП(СтрокаДерева.Ссылка.УникальныйИдентификатор()));
		Структура.Вставить("is_group",    СтрокаДерева.ЭтоГруппа);
		Структура.Вставить("delete_mark", СтрокаДерева.ПометкаУдаления);
		Структура.Вставить("code", 		  СокрЛП(СтрокаДерева.Код));
		Структура.Вставить("name", 		  СокрЛП(СтрокаДерева.Наименование));
		Структура.Вставить("full_name",   СокрЛП(СтрокаДерева.НаименованиеПолное));
		Структура.Вставить("unit", 		  СокрЛП(СтрокаДерева.ЕдиницаИзмерения));
		
		Если СтрокаДерева.ЭтоГруппа = Истина Тогда
			Массив = Новый Массив;
			
			РекурсивныйОбходДереваЗначенийНоменклатуры(СтрокаДерева.Строки, Массив);
			
			Структура.Вставить("inside", Массив);	
		КонецЕсли;
		
		РодительскийМассив.Добавить(Структура);
	КонецЦикла;
	
КонецПроцедуры

// 
////
Процедура ОтправитьСМС(НомерТелефона, Сообщение) Экспорт 
	
	Если ПолучитьЗначениеКонстанты("KilBil_СМСПровайдер") = Перечисления.KilBil_СМСПровайдеры.SMSC Тогда
		KilBil_ОтправкаСМС_SMSC.ОтправитьСМС(НомерТелефона, Сообщение);
	Иначе
		// ??
	КонецЕсли; 
	
КонецПроцедуры

// 
////
Функция ПолучитьСМСКод() Экспорт 
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	
	Возврат Формат(ГенераторСлучайныхЧисел.СлучайноеЧисло(100001, 999999), "ЧДЦ=; ЧГ=0"); 
	
КонецФункции

// 
////
Функция ПроверитьПрефиксКарты(НомерКарты) Экспорт 
	
	Возврат Лев(НомерКарты, 2) = KilBil_БонуснаяСистема.ПолучитьЗначениеКонстанты("KilBil_ПрефиксКарты");
	
КонецФункции

// 
////
Функция ПроверитьНомерТелефона(НомерТелефона) Экспорт  
	
	Значение = НомерТелефона;
	Значение = СтрЗаменить(Значение, "0", "");
	Значение = СтрЗаменить(Значение, "1", "");
	Значение = СтрЗаменить(Значение, "2", "");
	Значение = СтрЗаменить(Значение, "3", "");
	Значение = СтрЗаменить(Значение, "4", "");
	Значение = СтрЗаменить(Значение, "5", "");
	Значение = СтрЗаменить(Значение, "6", "");
	Значение = СтрЗаменить(Значение, "7", "");
	Значение = СтрЗаменить(Значение, "8", "");
	Значение = СтрЗаменить(Значение, "9", "");
	
	Если СтрДлина(Значение) <> 0 Тогда
		Результат = Ложь;
	ИначеЕсли СтрДлина(НомерТелефона) <> 11 Тогда
		Результат = Ложь;
	ИначеЕсли Лев(НомерТелефона, 1) <> "7" Тогда
		Результат = Ложь;
	Иначе
		Результат = Истина;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// 
////
Функция ИспользоватьБонуснуюСистему() Экспорт 
	
	Значение = ПолучитьЗначениеКонстанты("KilBil_ИспользоватьБонуснуюСистему");
	
	Если Значение = Неопределено Тогда
		Значение = Ложь;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// 
////
Функция ИспользоватьКарты() Экспорт 
	
	Значение = ПолучитьЗначениеКонстанты("KilBil_ВидАутентификацииКлиента");
		
	Возврат Значение = Перечисления.KilBil_ВидАутентификацииКлиента.Карта ИЛИ
	 		Значение = Перечисления.KilBil_ВидАутентификацииКлиента.Смешаный;
	
КонецФункции
		
// 
////
Функция ИспользоватьНомерТелефона() Экспорт 
	
	Значение = ПолучитьЗначениеКонстанты("KilBil_ВидАутентификацииКлиента");
		
	Возврат Значение = Перечисления.KilBil_ВидАутентификацииКлиента.НомерТелефона ИЛИ
	 		Значение = Перечисления.KilBil_ВидАутентификацииКлиента.Смешаный;
	
КонецФункции


